name: Publish to npm

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if version changed
        id: version-check
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

          # Check if this version is already published (early exit)
          if npm view @ultranomic/hook@$PACKAGE_VERSION version 2>/dev/null; then
            echo "Version $PACKAGE_VERSION already published, skipping..." | tee -a $GITHUB_STEP_SUMMARY
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "## 📦 Publishing Skipped" >> $GITHUB_STEP_SUMMARY
            echo "Version \`$PACKAGE_VERSION\` is already published to npm." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "Version $PACKAGE_VERSION not published, proceeding..." | tee -a $GITHUB_STEP_SUMMARY
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "## 🚀 Publishing Version $PACKAGE_VERSION" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Node.js
        if: steps.version-check.outputs.skip == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        if: steps.version-check.outputs.skip == 'false'
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Get pnpm store directory
        if: steps.version-check.outputs.skip == 'false'
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        if: steps.version-check.outputs.skip == 'false'
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
            node_modules
          key: ${{ runner.os }}-pnpm-24-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-24-
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        if: steps.version-check.outputs.skip == 'false'
        run: pnpm install --frozen-lockfile

      - name: Run tests
        if: steps.version-check.outputs.skip == 'false'
        run: pnpm test

      - name: Build package
        if: steps.version-check.outputs.skip == 'false'
        run: pnpm run build

      - name: Create GitHub Release
        if: steps.version-check.outputs.skip == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.version }}
          release_name: Release v${{ steps.version-check.outputs.version }}
          body: |
            Version ${{ steps.version-check.outputs.version }} ready for release

            Install with:
            ```
            pnpm add @ultranomic/hook@${{ steps.version-check.outputs.version }}
            npm install @ultranomic/hook@${{ steps.version-check.outputs.version }}
            ```
          draft: false
          prerelease: false

      - name: Publish to npm
        if: steps.version-check.outputs.skip == 'false'
        run: |
          pnpm publish --access public
          echo "✅ Successfully published version ${{ steps.version-check.outputs.version }} to npm" >> $GITHUB_STEP_SUMMARY
          echo "📋 Install with: \`pnpm add @ultranomic/hook@${{ steps.version-check.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update workflow summary
        if: steps.version-check.outputs.skip == 'false'
        run: |
          echo "🏷️ Created GitHub release: [v${{ steps.version-check.outputs.version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version-check.outputs.version }})" >> $GITHUB_STEP_SUMMARY
